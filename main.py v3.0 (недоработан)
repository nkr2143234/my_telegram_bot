import telebot
import logging
import random
import json
import sqlite3
import sys
import pytz
import unicodedata
from flask import Flask, request, abort
from config import BOT_API_TOKEN
from telebot import types
from datetime import datetime, timedelta
from collections import defaultdict
from telebot.handler_backends import ContinueHandling
from threading import Lock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/nrk21312/eco_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
sql_logger = logging.getLogger('SQLite')
sql_logger.setLevel(logging.DEBUG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = '/home/nrk21312/eco_bot.db'
logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏: {DB_PATH}")

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
db_lock = Lock()

try:
    conn = sqlite3.connect(
        DB_PATH,
        check_same_thread=False,
        detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES,
        isolation_level=None
    )
    cursor = conn.cursor()
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    try:
        cursor.execute("SELECT 1")
        conn.commit()
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
        raise

    with db_lock:
        cursor.execute("PRAGMA foreign_keys = ON")
        conn.commit()
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    raise

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
try:
    with db_lock:
        cursor.execute("PRAGMA encoding = 'UTF-8'")
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                        (chat_id INTEGER PRIMARY KEY,
                         data TEXT)''')
        conn.commit()
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    raise

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_GOALS = [
    "‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—É—é –±—É—Ç—ã–ª–∫—É",
    "üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤",
    "üì¶ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º—É—Å–æ—Ä",
    "üí° –í—ã–∫–ª—é—á–∞—Ç—å —Å–≤–µ—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ",
    "üö≤ –ü–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ"
]

ECO_STATS = {
    '‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—É—é –±—É—Ç—ã–ª–∫—É': {'water': 500, 'plastic': 1},
    'üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤': {'plastic': 3},
    'üì¶ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º—É—Å–æ—Ä': {'co2': 2},
    'üí° –í—ã–∫–ª—é—á–∞—Ç—å —Å–≤–µ—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ': {'co2': 1},
    'üö≤ –ü–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ': {'co2': 5}
}

BADGES = {
    'beginner': {'threshold': 3, 'emoji': 'üå±', 'name': '–≠–∫–æ-–ù–æ–≤–∏—á–æ–∫', 'description': '3 –¥–Ω—è –ø–æ–¥—Ä—è–¥'},
    'enthusiast': {'threshold': 7, 'emoji': 'üåü', 'name': '–≠–∫–æ-–≠–Ω—Ç—É–∑–∏–∞—Å—Ç', 'description': '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥'},
    'hero': {'threshold': 15, 'emoji': 'üèÜ', 'name': '–≠–∫–æ-–ì–µ—Ä–æ–π', 'description': '15 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥'}
}

ECO_TIPS = [
    "üõçÔ∏è –ù–æ—Å–∏—Ç–µ —Å —Å–æ–±–æ–π —Å–∫–ª–∞–¥–Ω—É—é –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—É—é —Å—É–º–∫—É",
    "üíß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä –Ω–∞ –∫—Ä–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤–æ–¥—ã",
    "üö≤ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –¥–æ 5 –∫–º",
    "‚ôªÔ∏è –°–æ–±–∏—Ä–∞–π—Ç–µ –±–∞—Ç–∞—Ä–µ–π–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
    "üåø –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π Fairtrade",
    "üì¶ –ü–æ–∫—É–º–∞–π—Ç–µ –∫—Ä—É–ø—ã –∏ —Å–ø–µ—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–≤–µ—Å",
    "üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–º–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏",
    "üå≥ –ü–æ—Å–∞–¥–∏—Ç–µ –¥–µ—Ä–µ–≤–æ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–∫–æ–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    "üö∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—É—é –±—É—Ç—ã–ª–∫—É –¥–ª—è –≤–æ–¥—ã",
    "üçé –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏ —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
    "üëï –û—Ç–¥–∞–≤–∞–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—É—é –æ–¥–µ–∂–¥—É –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã",
    "üöó –°–æ–≤–º–µ—â–∞–π—Ç–µ –ø–æ–µ–∑–¥–∫–∏, —á—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ–±–µ–≥",
    "‚òï –û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –∫—Ä—ã—à–µ–∫ –¥–ª—è —Å—Ç–∞–∫–∞–Ω–æ–≤",
    "üì± –°–¥–∞–≤–∞–π—Ç–µ —Å—Ç–∞—Ä—É—é —Ç–µ—Ö–Ω–∏–∫—É –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É",
    "üöÆ –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –≤ —Å–≤–æ–µ–º –ø–æ–¥—ä–µ–∑–¥–µ",
    "üåû –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏ –Ω–∞ –±–∞–ª–∫–æ–Ω–µ",
    "üß¥ –í—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ—Å–º–µ—Ç–∏–∫—É —Å —ç–∫–æ-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏",
    "üìö –ë–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –≤–º–µ—Å—Ç–æ –ø–æ–∫—É–ø–∫–∏",
    "üçÉ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–º–±—É–∫–æ–≤—ã–µ –∑—É–±–Ω—ã–µ —â–µ—Ç–∫–∏",
    "üöø –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –¥—É—à –≤–º–µ—Å—Ç–æ –≤–∞–Ω–Ω—ã"
]

TIP_CATEGORIES = {
    'üè† –î–æ–º': [
        "‚ôªÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–ø–æ—Å—Ç–µ—Ä –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –æ—Ç—Ö–æ–¥–æ–≤",
        "üí° –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –ª–∞–º–ø–æ—á–∫–∏ –Ω–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ",
        "üö∞ –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤–æ–¥—ã –≤–º–µ—Å—Ç–æ –ø–æ–∫—É–ø–∫–∏ –±—É—Ç–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π",
        "üå°Ô∏è –£—Ç–µ–ø–ª–∏—Ç–µ –æ–∫–Ω–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å"
    ],
    'üõí –ü–æ–∫—É–ø–∫–∏': [
        "üõçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫–æ–º–µ—à–æ—á–∫–∏ –¥–ª—è –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤",
        "üç¥ –û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ø–æ—Å—É–¥—ã",
        "üìÖ –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ",
        "üå± –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∏–æ—Ä–∞–∑–ª–∞–≥–∞–µ–º–æ–π —É–ø–∞–∫–æ–≤–∫–µ"
    ],
    'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': [
        "üöå –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ä—à–µ—Ä–∏–Ω–≥–æ–º –≤–º–µ—Å—Ç–æ –ª–∏—á–Ω–æ–≥–æ –∞–≤—Ç–æ",
        "üö∂ –ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—à–∫–æ–º 10 000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å",
        "‚ö° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏",
        "üó∫Ô∏è –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞"
    ],
    'üí° –≠–Ω–µ—Ä–≥–∏—è': [
        "üîå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–º–Ω—ã–µ —Ä–æ–∑–µ—Ç–∫–∏ —Å —Ç–∞–π–º–µ—Ä–æ–º",
        "‚ùÑÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –Ω–∞ 24¬∞C",
        "‚òÄÔ∏è –°—É—à–∏—Ç–µ –±–µ–ª—å–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º",
        "üîã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"
    ],
    'üçé –ü–∏—Ç–∞–Ω–∏–µ': [
        "üçΩÔ∏è –ì–æ—Ç–æ–≤—å—Ç–µ –ø–æ—Ä—Ü–∏–∏ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞",
        "ü•ï –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –µ–¥—ã –¥–ª—è –Ω–æ–≤—ã—Ö –±–ª—é–¥",
        "üìÜ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥",
        "üå± –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —É—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å"
    ],
    'üíß –í–æ–¥–∞': [
        "üöø –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –¥—É—à–∞ –¥–æ 5 –º–∏–Ω—É—Ç",
        "üåßÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—á–∫—É –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ–∂–¥–µ–≤–æ–π –≤–æ–¥—ã",
        "üö∞ –ß–∏–Ω–∏—Ç–µ –ø—Ä–æ—Ç–µ—á–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è",
        "ü™£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ–¥—É –ø–æ—Å–ª–µ –º—ã—Ç—å—è –æ–≤–æ—â–µ–π –¥–ª—è –ø–æ–ª–∏–≤–∞"
    ],
    'üëó –ú–æ–¥–∞': [
        "üëñ –ü–æ–∫—É–ø–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ–¥–µ–∂–¥—É –Ω–∞ –≤—Ç–æ—Ä–∏—á–Ω–æ–º —Ä—ã–Ω–∫–µ",
        "üßµ –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Ä–µ–º–æ–Ω—Ç–Ω—É—é –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –¥–ª—è –æ–¥–µ–∂–¥—ã",
        "üîÑ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–≤–æ–ø-–≤–µ—á–µ—Ä–∏–Ω–∫–∞—Ö",
        "üéí –í—ã–±–∏—Ä–∞–π—Ç–µ —Å—É–º–∫–∏ –∏–∑ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    ],
    'üå≥ –ü—Ä–∏—Ä–æ–¥–∞': [
        "üå≤ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø–æ—Å–∞–¥–∫–µ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Å–∞–¥–æ–≤",
        "üêù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç–µ–ª—å –¥–ª—è –Ω–∞—Å–µ–∫–æ–º—ã—Ö –Ω–∞ –±–∞–ª–∫–æ–Ω–µ",
        "üå∏ –°–∞–∂–∞–π—Ç–µ –º–µ—Å—Ç–Ω—ã–µ –≤–∏–¥—ã —Ä–∞—Å—Ç–µ–Ω–∏–π",
        "üóëÔ∏è –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å—É–±–±–æ—Ç–Ω–∏–∫ –≤ —Å–≤–æ–µ–º —Ä–∞–π–æ–Ω–µ"
    ],
    'üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': [
        "üì° –û—Ç–∫–ª—é—á–∞–π—Ç–µ —Ä–æ—É—Ç–µ—Ä –Ω–∞ –Ω–æ—á—å",
        "üîã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
        "üñ•Ô∏è –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É —Å –≤—ã—Å–æ–∫–∏–º –∫–ª–∞—Å—Å–æ–º —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "‚òÅÔ∏è –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â"
    ],
    'üë∂ –î–µ—Ç–∏': [
        "üß∏ –ü–æ–∫—É–ø–∞–π—Ç–µ –∏–≥—Ä—É—à–∫–∏ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        "üìö –í—ã–±–∏—Ä–∞–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∏",
        "üé® –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏–∑ –≤—Ç–æ—Ä—Å—ã—Ä—å—è",
        "üö∏ –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞"
    ]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
token = BOT_API_TOKEN
bot = telebot.TeleBot(token, threaded=False)

class UserData:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.goals = []
        self.adding_goal = False
        self.deleting_goal = False
        self.notifications_enabled = True
        self.notification_time = "10:00"
        self.total_water = 0
        self.total_co2 = 0
        self.total_plastic = 0
        self.progress_history = []
        self.badges = []
        self.last_tip_date = None
        self.preferred_categories = list(TIP_CATEGORIES.keys())
        self.units = 'metric'

    def save(self):
        data = {
            'goals': self.goals,
            'notification_time': self.notification_time,
            'notifications_enabled': self.notifications_enabled,
            'total_water': self.total_water,
            'total_co2': self.total_co2,
            'total_plastic': self.total_plastic,
            'progress_history': [d.isoformat() for d in self.progress_history],
            'badges': self.badges,
            'last_tip_date': self.last_tip_date.isoformat() if self.last_tip_date else None,
            'preferred_categories': self.preferred_categories,
            'units': self.units,
            'adding_goal': self.adding_goal,
            'deleting_goal': self.deleting_goal
        }
        try:
            json_data = json.dumps(data, ensure_ascii=False)
            sql_logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.chat_id}: {json_data[:200]}...")

            with db_lock:
                cursor.execute('REPLACE INTO users (chat_id, data) VALUES (?, ?)',
                               (self.chat_id, json_data))
                conn.commit()
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.chat_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            with db_lock:
                cursor.execute('SELECT data FROM users WHERE chat_id = ?', (self.chat_id,))
                result = cursor.fetchone()
                
                if self.goals:
                    if not result or json.loads(result[0])['goals'][-1]['text'] != self.goals[-1]['text']:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.chat_id}")
                        raise sqlite3.IntegrityError("Verification failed")
                else:
                    if result and json.loads(result[0])['goals']:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
                        raise sqlite3.IntegrityError("Verification failed")

        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            conn.rollback()
            raise
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            conn.rollback()
            raise

    @classmethod
    def load(cls, chat_id):
        try:
            with db_lock:
                cursor.execute('SELECT data FROM users WHERE chat_id = ?', (chat_id,))
                result = cursor.fetchone()

            if result:
                data = json.loads(result[0])
                user = cls(chat_id)
                user.goals = data.get('goals', [])
                user.notification_time = data.get('notification_time', "10:00")
                user.notifications_enabled = data.get('notifications_enabled', True)
                user.total_water = data.get('total_water', 0)
                user.total_co2 = data.get('total_co2', 0)
                user.total_plastic = data.get('total_plastic', 0)
                user.progress_history = [datetime.fromisoformat(d) for d in data.get('progress_history', [])]
                user.badges = data.get('badges', [])
                user.last_tip_date = datetime.fromisoformat(data['last_tip_date']) if data.get('last_tip_date') else None
                user.preferred_categories = data.get('preferred_categories', list(TIP_CATEGORIES.keys()))
                user.units = data.get('units', 'metric')
                user.adding_goal = data.get('adding_goal', False)
                user.deleting_goal = data.get('deleting_goal', False)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å {len(user.goals)} —Ü–µ–ª—è–º–∏")
                return user
            return None
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            return None

    def update_stats(self, goal_text):
        stats = ECO_STATS.get(goal_text, {})
        self.total_water += stats.get('water', 0)
        self.total_co2 += stats.get('co2', 0)
        self.total_plastic += stats.get('plastic', 0)

        today = datetime.now()
        if today.date() not in [d.date() for d in self.progress_history]:
            self.progress_history.append(today)
            self.save()

        return self.check_badges()

    def check_badges(self):
        new_badges = []
        consecutive_days = self.get_consecutive_days()
        for badge_id, params in BADGES.items():
            if badge_id not in self.badges and consecutive_days >= params['threshold']:
                self.badges.append(badge_id)
                new_badges.append(params)
                self.save()
        return new_badges

    def get_consecutive_days(self):
        dates = [d.date() for d in self.progress_history]
        if not dates:
            return 0

        unique_dates = sorted(list(set(dates)))
        current_streak = 1
        max_streak = 1

        for i in range(1, len(unique_dates)):
            if (unique_dates[i] - unique_dates[i-1]).days == 1:
                current_streak += 1
                max_streak = max(max_streak, current_streak)
            else:
                current_streak = 1
        return max_streak

# –ú–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üöÄ –°–¢–ê–†–¢"))
    markup.row(
        types.KeyboardButton("üå± –ú–æ–∏ —Ü–µ–ª–∏"),
        types.KeyboardButton("üìå –°–æ–≤–µ—Ç –¥–Ω—è")
    )
    markup.row(
        types.KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"),
        types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    markup.row(types.KeyboardButton("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    return markup

def goals_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å"),
        types.KeyboardButton("üìù –ú–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏"),
        types.KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    ]
    markup.add(*buttons)
    return markup

def tips_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç"),
        types.KeyboardButton("üìö –í—Å–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    ]
    markup.add(*buttons)
    return markup

def settings_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        types.KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–∫–ª/–í—ã–∫–ª"),
        types.KeyboardButton("üìè –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"),
        types.KeyboardButton("üí° –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–µ—Ç–æ–≤"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    ]
    markup.add(*buttons)
    return markup

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def check_adding_goal(msg):
    user = UserData.load(msg.chat.id)
    status = user.adding_goal if user else False
    logger.debug(f"Check adding goal: {status} for {msg.chat.id}")
    return status

def check_deleting_goal(msg):
    user = UserData.load(msg.chat.id)
    return user.deleting_goal if user else False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        user = UserData.load(message.chat.id)
        if not user:
            user = UserData(message.chat.id)
            user.save()
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {message.chat.id}")
        bot.send_message(message.chat.id,
                         text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã",
                         reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_message: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

@bot.message_handler(commands=['cancel'])
def cancel_operations(message):
    user = UserData.load(message.chat.id)
    if user:
        if user.adding_goal or user.deleting_goal:
            logger.debug(f"–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
            user.adding_goal = False
            user.deleting_goal = False
            user.save()
            bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ /start")

@bot.message_handler(func=lambda msg: msg.text == "üöÄ –°–¢–ê–†–¢")
def start_button_handler(message):
    text = (
        "üåç *–≠–∫–æ–ü–æ–º–æ—â–Ω–∏–∫* üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
        "üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "üìà –í–∏–¥–µ—Ç—å —Å–≤–æ–π —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–∫–ª–∞–¥\n\n"
        "–ù–∞—á–Ω–∏ —Å –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ 'üå± –ú–æ–∏ —Ü–µ–ª–∏'!"
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üå± –ú–æ–∏ —Ü–µ–ª–∏")
def goals_handler(message):
    user = UserData.load(message.chat.id)
    if not user.goals:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [types.KeyboardButton(goal) for goal in DEFAULT_GOALS]
        buttons.append(types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å"))
        buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        markup.add(*buttons)
        bot.send_message(message.chat.id,
                         "üåü –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–ª–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é!",
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ü–µ–ª—è–º–∏:", reply_markup=goals_menu())

@bot.message_handler(func=lambda msg: msg.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å"])
def add_goal_handler(message):
    try:
        user = UserData.load(message.chat.id)
        if not user:
            raise ValueError("User not found")
            
        user.adding_goal = True
        user.save()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏")
        markup = types.ForceReply(selective=False)
        sent = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å:", reply_markup=markup)
        
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {sent.message_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_goal_handler: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏", reply_markup=main_menu())

@bot.message_handler(func=check_adding_goal, content_types=['text'], priority=1)
def process_new_goal(message):
    try:
        logger.info(f"üèÅ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
        user = UserData.load(message.chat.id)
        
        if not user:
            logger.error("üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏")
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_menu())
            return
            
        logger.debug(f"üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: adding_goal={user.adding_goal}, —Ü–µ–ª–µ–π={len(user.goals)}")
        
        if not user.adding_goal:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏")
            return

        original_text = message.text
        logger.debug(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '{original_text}'")
        logger.debug(f"Unicode code points: {[ord(c) for c in original_text]}")
        
        try:
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —é–Ω–∏–∫–æ–¥-—Å–∏–º–≤–æ–ª–æ–≤
            goal_text = unicodedata.normalize('NFC', original_text).strip()
            logger.debug(f"üî† –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{goal_text}' (–¥–ª–∏–Ω–∞: {len(goal_text)}, Unicode: {', '.join(f'U+{ord(c):04x}' for c in goal_text)})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            clean_text = ''.join(c for c in goal_text if c.isprintable() and not unicodedata.category(c).startswith('C'))
            if clean_text != goal_text:
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {goal_text.encode('unicode_escape').decode()}")
                raise ValueError("–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
                
            goal_text = clean_text
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            MIN_GOAL_LENGTH = 3
            MAX_GOAL_LENGTH = 100
            if len(goal_text) < MIN_GOAL_LENGTH:
                logger.warning(f"üìè –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ü–µ–ª—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(goal_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                bot.send_message(message.chat.id,
                               f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ü–µ–ª—å (–º–∏–Ω–∏–º—É–º {MIN_GOAL_LENGTH} —Å–∏–º–≤–æ–ª–∞)",
                               reply_markup=goals_menu())
                user.adding_goal = False
                user.save()
                return

            if len(goal_text) > MAX_GOAL_LENGTH:
                logger.warning(f"üìè –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ü–µ–ª—å: {len(goal_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                bot.send_message(message.chat.id,
                               f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ü–µ–ª—å (–º–∞–∫—Å–∏–º—É–º {MAX_GOAL_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)",
                               reply_markup=goals_menu())
                user.adding_goal = False
                user.save()
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±—É–∫–≤
            has_letters = any(c.isalpha() for c in goal_text)
            logger.debug(f"üî° –ù–∞–ª–∏—á–∏–µ –±—É–∫–≤: {has_letters}")
            if not has_letters:
                logger.warning("üî§ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±—É–∫–≤—ã –≤ —Ü–µ–ª–∏")
                bot.send_message(message.chat.id,
                               "‚ùå –¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã",
                               reply_markup=goals_menu())
                user.adding_goal = False
                user.save()
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ü–µ–ª–µ–π
            similar_goals = [
                g for g in user.goals 
                if unicodedata.normalize('NFKD', g['text']).casefold() == 
                   unicodedata.normalize('NFKD', goal_text).casefold()
            ]

            if similar_goals:
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è —Ü–µ–ª—å: {similar_goals[0]['text']}")
                bot.send_message(message.chat.id, 
                                f"‚ùå –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é:\n{similar_goals[0]['text']}", 
                                reply_markup=goals_menu())
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            existing_goals = [unicodedata.normalize('NFC', g["text"]).strip().lower() for g in user.goals]
            normalized_goal = goal_text.strip().lower()
            logger.debug(f"üåÄ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏: {existing_goals}")
            logger.debug(f"üåÄ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–∞—è —Ü–µ–ª—å: '{normalized_goal}'")

            if normalized_goal in existing_goals:
                logger.warning("üåÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Ü–µ–ª–∏")
                bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ —Ü–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=goals_menu())
                user.adding_goal = False
                user.save()
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ü–µ–ª–µ–π
            MAX_GOALS = 10
            if len(user.goals) >= MAX_GOALS:
                logger.warning("üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ü–µ–ª–µ–π")
                bot.send_message(message.chat.id,
                               f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_GOALS} —Ü–µ–ª–µ–π",
                               reply_markup=goals_menu())
                user.adding_goal = False
                user.save()
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
            new_goal = {
                "text": goal_text,
                "created": datetime.now().strftime("%d.%m.%Y"),
                "progress": 0
            }
            logger.debug(f"üìù –ù–æ–≤–∞—è —Ü–µ–ª—å: {new_goal}")

            user.goals.append(new_goal)
            user.adding_goal = False

            logger.debug("üíæ –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
            user.save()
            logger.info(f"‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {goal_text}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(message.chat.id, f"‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {goal_text}", reply_markup=goals_menu())

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            verify_user = UserData.load(message.chat.id)
            if not verify_user or goal_text not in [g['text'] for g in verify_user.goals]:
                logger.error(f"–¶–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
                bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏", reply_markup=main_menu())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª–∏", reply_markup=goals_menu())
            user.adding_goal = False
            user.save()
            return

    except Exception as e:
        logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        if user:
            user.adding_goal = False
            user.save()
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text in DEFAULT_GOALS)
def add_default_goal(message):
    try:
        user = UserData.load(message.chat.id)
        user.goals.append({
            "text": message.text,
            "created": datetime.now().strftime("%d.%m.%Y"),
            "progress": 0
        })
        user.save()
        bot.send_message(message.chat.id, f"‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {message.text}", reply_markup=goals_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìù –ú–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏")
def show_goals_handler(message):
    try:
        user = UserData.load(message.chat.id)
        if not user.goals:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π", reply_markup=goals_menu())
            return

        goals_text = "üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n\n"
        for i, goal in enumerate(user.goals, 1):
            goals_text += f"{i}. {goal['text']}\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {goal['created']}\nüèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å: {goal['progress']} –¥–Ω–µ–π\n\n"
        bot.send_message(message.chat.id, goals_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
def mark_progress_handler(message):
    try:
        user = UserData.load(message.chat.id)
        if not user.goals:
            bot.send_message(message.chat.id, "üì≠ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª–∏!", reply_markup=goals_menu())
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for goal in user.goals:
            markup.add(types.KeyboardButton(f"‚úÖ {goal['text']}"))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text.startswith("‚úÖ"))
def process_progress_marking(message):
    try:
        if ' ' not in message.text:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–ª–∏")

        goal_text = message.text.split(' ', 1)[1].strip()
        user = UserData.load(message.chat.id)
        response = ""

        for goal in user.goals:
            if goal["text"] == goal_text:
                goal["progress"] += 1
                new_badges = user.update_stats(goal_text)
                response = (f"üéâ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n–¶–µ–ª—å: {goal_text}\n"
                            f"–í—Å–µ–≥–æ –¥–Ω–µ–π: {goal['progress']}\n"
                            f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user.get_consecutive_days()} –¥–Ω–µ–π")

                if new_badges:
                    badges_text = "\n\nüéñ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(
                        [f"{b['emoji']} {b['name']} - {b['description']}" for b in new_badges]
                    )
                    response += badges_text
                    for badge in new_badges:
                        bot.send_message(message.chat.id,
                                         f"üèÖ *–ù–æ–≤—ã–π –±–µ–π–¥–∂!*\n{badge['emoji']} *{badge['name']}*\n_{badge['description']}_",
                                         parse_mode='Markdown')

                bot.send_message(message.chat.id, response, reply_markup=goals_menu())
                return

        bot.send_message(message.chat.id, f"‚ùå –¶–µ–ª—å '{goal_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=goals_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å")
def delete_goal_handler(message):
    try:
        user = UserData.load(message.chat.id)
        if not user.goals:
            bot.send_message(message.chat.id, "üóë –ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=goals_menu())
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for goal in user.goals:
            markup.add(types.KeyboardButton(f"‚ùå {goal['text']}"))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        user.deleting_goal = True
        user.save()
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text.startswith("‚ùå "))
def process_goal_deletion(message):
    try:
        user = UserData.load(message.chat.id)
        if not user:
            raise ValueError("User not found")

        goal_text = unicodedata.normalize('NFC', message.text[2:].strip())
        logger.debug(f"–ü–æ–∏—Å–∫ —Ü–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: '{goal_text}'")

        found = False
        for i, goal in enumerate(user.goals):
            normalized = unicodedata.normalize('NFC', goal['text']).strip()
            if normalized == goal_text:
                del user.goals[i]
                user.deleting_goal = False
                user.save()
                bot.send_message(message.chat.id, f"üóë –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞: {goal['text']}", reply_markup=goals_menu())
                found = True
                break

        if not found:
            logger.warning(f"–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {goal_text}")
            bot.send_message(message.chat.id, "‚ùå –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=goals_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
def progress_handler(message):
    try:
        user = UserData.load(message.chat.id)

        stats_text = (
            "üåç *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üíß –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –≤–æ–¥—ã: {user.total_water} –ª\n"
            f"üå≥ –°–æ–∫—Ä–∞—â–µ–Ω–æ CO2: {user.total_co2} –∫–≥\n"
            f"üõçÔ∏è –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–ª–∞—Å—Ç–∏–∫–∞: {user.total_plastic} —à—Ç\n"
        )

        week_progress = sum(1 for d in user.progress_history if d > datetime.now() - timedelta(days=7))
        progress_bar = "üü¢" * week_progress + "‚ö™Ô∏è" * (7 - week_progress)
        viz_text = f"\nüìà *–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é*\n{progress_bar}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: {week_progress}/7\n"

        streak_text = f"\nüî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user.get_consecutive_days()} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"

        badges_text = "\nüèÜ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã*\n"
        for badge_id, params in BADGES.items():
            status = "‚úÖ" if badge_id in user.badges else "‚óªÔ∏è"
            badges_text += f"{params['emoji']} {params['name']} - {params['description']} {status}\n"

        advice_text = generate_advice(user)
        full_text = stats_text + viz_text + streak_text + badges_text + advice_text

        bot.send_message(message.chat.id, full_text, parse_mode='Markdown', reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=main_menu())

def generate_advice(user):
    if not user.goals:
        return "\n\nüí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏!"

    goal_stats = defaultdict(int)
    for goal in user.goals:
        for day in user.progress_history[-7:]:
            goal_stats[goal['text']] += 1

    advice = []
    if goal_stats:
        least_common = min(goal_stats, key=goal_stats.get)
        if goal_stats[least_common] < 2:
            advice.append(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∞—â–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ü–µ–ª—å '{least_common}'")

    if user.total_plastic < 10:
        advice.append("üõçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å—É–º–∫–∏ –≤–º–µ—Å—Ç–æ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
    if user.total_water < 2000:
        advice.append("üíß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä –Ω–∞ –∫—Ä–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤–æ–¥—ã")
    if user.total_co2 < 15:
        advice.append("üå≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∞—â–µ —Ö–æ–¥–∏—Ç—å –ø–µ—à–∫–æ–º –∏–ª–∏ –µ–∑–¥–∏—Ç—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ")

    return "\n\nüåü –°–æ–≤–µ—Ç—ã:\n" + "\n".join(advice) if advice else "\n\nüéâ –í—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

@bot.message_handler(func=lambda msg: msg.text == "üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def info_handler(message):
    text = (
        "*üìö –ò–ù–§–û–†–ú–ê–¶–ò–Ø*\n\n"
        "*üåç –û –ø—Ä–æ–µ–∫—Ç–µ:*\n"
        "–ß–∞—Ç\\-–±–æ—Ç ¬´–≠–∫–æ–ü–æ–º–æ—â–Ω–∏–∫¬ª ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è\\.\n\n"
        "*üõ†Ô∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "1\\. –í—ã–±–æ—Ä —Ü–µ–ª–µ–π –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–∏—Ö\n"
        "2\\. –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "3\\. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
        "*üìñ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:*\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫—É—Ä—Å—ã –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é\n\n"
        "*‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
        "Telegram: @ecohelper\\_support\n"
        "Email: support@ecohelper\\.ru"
    )
    bot.send_message(message.chat.id, text, parse_mode='MarkdownV2')

@bot.message_handler(func=lambda msg: msg.text == "üìå –°–æ–≤–µ—Ç –¥–Ω—è")
def daily_tip_handler(message):
    try:
        user = UserData.load(message.chat.id)
        if not user:
            raise ValueError("User not found")

        tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(tz)
        
        if not user.last_tip_date:
            user.last_tip_date = now - timedelta(days=1)

        if now.date() > user.last_tip_date.astimezone(tz).date():
            user.last_tip_date = now
            tip = random.choice(ECO_TIPS)
            response = f"üåü *–°–æ–≤–µ—Ç –¥–Ω—è:*\n\n{tip}"
            user.save()
        else:
            response = "üìå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–æ–≤–µ—Ç —Å–µ–≥–æ–¥–Ω—è. –í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç:\n\n" + random.choice(ECO_TIPS)

        bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=tips_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Å–æ–≤–µ—Ç–∞ –¥–Ω—è: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç")
def random_tip_handler(message):
    try:
        category = random.choice(list(TIP_CATEGORIES.keys()))
        tip = random.choice(TIP_CATEGORIES[category])
        response = f"üé≤ *–°–æ–≤–µ—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:*\n\n{tip}"
        bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=tips_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìö –í—Å–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
def all_tips_handler(message):
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for category in TIP_CATEGORIES:
            buttons.append(types.InlineKeyboardButton(
                text=category,
                callback_data=f"tips_{category}"))
        markup.add(*buttons)
        markup.add(types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_tips"))
        bot.send_message(message.chat.id, "üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–∫–æ—Å–æ–≤–µ—Ç–æ–≤:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–≤–µ—Ç–æ–≤: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≤–µ—Ç–æ–≤", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('tips_'))
def category_tips_handler(call):
    try:
        category = call.data[5:]
        tips = TIP_CATEGORIES.get(category, [])

        if not tips:
            bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        tips_text = f"üìó *–°–æ–≤–µ—Ç—ã: {category}*\n\n" + "\n".join(f"‚ñ´Ô∏è {tip}" for tip in tips)
        bot.edit_message_text(chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text=tips_text,
                            parse_mode='Markdown',
                            reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: {str(e)}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≤–µ—Ç–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data == "close_tips")
def close_tips_handler(call):
    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–≤–µ—Ç–æ–≤: {str(e)}")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings_handler(message):
    try:
        user = UserData.load(message.chat.id)
        status = "–í–ö–õ" if user.notifications_enabled else "–í–´–ö–õ"
        units = "–ú–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ (–∫–≥, –ª–∏—Ç—Ä—ã)" if user.units == 'metric' else "–ò–º–ø–µ—Ä—Å–∫–∏–µ (—Ñ—É–Ω—Ç—ã, –≥–∞–ª–ª–æ–Ω—ã)"

        text = (
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}\n"
            f"üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user.notification_time}\n"
            f"üìè –°–∏—Å—Ç–µ–º–∞ –º–µ—Ä: {units}\n"
            f"üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: {len(user.preferred_categories)}"
        )
        bot.send_message(message.chat.id, text, reply_markup=settings_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
def change_time_handler(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        times = ["08:00", "10:00", "12:00", "15:00", "18:00", "–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"]
        markup.add(*[types.KeyboardButton(t) for t in times])
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è")
def custom_time_handler(message):
    try:
        msg = bot.send_message(message.chat.id,
                            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
                            reply_markup=types.ForceReply())
        bot.register_next_step_handler(msg, process_custom_time)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏", reply_markup=main_menu())

def process_custom_time(message):
    try:
        user = UserData.load(message.chat.id)
        datetime.strptime(message.text, "%H:%M")
        user.notification_time = message.text
        user.save()
        bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}",
                        reply_markup=settings_menu())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú", reply_markup=settings_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text in ["08:00", "10:00", "12:00", "15:00", "18:00"])
def preset_time_handler(message):
    try:
        user = UserData.load(message.chat.id)
        user.notification_time = message.text
        user.save()
        bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}",
                        reply_markup=settings_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–∫–ª/–í—ã–∫–ª")
def toggle_notifications_handler(message):
    try:
        user = UserData.load(message.chat.id)
        user.notifications_enabled = not user.notifications_enabled
        user.save()
        status = "–í–ö–õ" if user.notifications_enabled else "–í–´–ö–õ"
        bot.send_message(message.chat.id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å {status}", reply_markup=settings_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìè –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è")
def units_handler(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            types.KeyboardButton("üìè –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞"),
            types.KeyboardButton("üìê –ò–º–ø–µ—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞")
        ]
        markup.add(*buttons)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏–π:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text in ["üìè –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞", "üìê –ò–º–ø–µ—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞"])
def set_units_handler(message):
    try:
        user = UserData.load(message.chat.id)
        user.units = 'metric' if "–ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è" in message.text else 'imperial'
        user.save()
        bot.send_message(message.chat.id, f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}", reply_markup=settings_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üí° –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–µ—Ç–æ–≤")
def tip_categories_handler(message):
    try:
        user = UserData.load(message.chat.id)
        markup = types.InlineKeyboardMarkup(row_width=2)
        for category in TIP_CATEGORIES:
            status = "‚úÖ" if category in user.preferred_categories else "‚ùå"
            markup.add(types.InlineKeyboardButton(
                text=f"{status} {category}",
                callback_data=f"toggle_{category}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–µ—Ç–æ–≤:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_'))
def toggle_category_handler(call):
    try:
        user = UserData.load(call.message.chat.id)
        category = call.data[7:]

        if category in user.preferred_categories:
            user.preferred_categories.remove(category)
        else:
            user.preferred_categories.append(category)

        user.save()
        bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        tip_categories_handler(call.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@bot.message_handler(func=lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥")
def back_handler(message):
    try:
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {str(e)}")

@app.route(f'/{BOT_API_TOKEN}', methods=['POST'])
def webhook():
    try:
        if request.method == 'POST':
            if request.headers.get('content-type') == 'application/json':
                json_string = request.get_data().decode('utf-8')
                update = telebot.types.Update.de_json(json_string)
                bot.process_new_updates([update])
                logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s", update)
                return '', 200
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π content-type: %s", request.headers.get('content-type'))
            abort(403)
        return 'EcoBot —Ä–∞–±–æ—Ç–∞–µ—Ç!', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {str(e)}")
        return 'Internal Server Error', 500

@bot.message_handler(func=lambda message: True, content_types=['text'], priority=100)
def fallback_handler(message):
    try:
        user = UserData.load(message.chat.id)
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} | User ID: {message.chat.id} | –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏: {user.adding_goal if user else '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}")

        if user and user.adding_goal:
            bot.send_message(message.chat.id, "‚úèÔ∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel")
        else:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å üòï\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", reply_markup=main_menu())

def set_webhook():
    try:
        webhook_url = f'https://nrk21312.pythonanywhere.com/{BOT_API_TOKEN}'
        bot.remove_webhook()
        bot.set_webhook(
            url=webhook_url,
            timeout=60,
            allowed_updates=['message', 'callback_query']
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        raise

if __name__ == '__main__':
    try:
        with db_lock:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            if not cursor.fetchone():
                raise RuntimeError("–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

            cursor.execute("PRAGMA integrity_check")
            integrity_check = cursor.fetchone()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {integrity_check[0]}")

            test_user = UserData.load(1)
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: OK")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        conn.close()
        exit(1)

    set_webhook()
    app.run(host='0.0.0.0', port=5000, debug=False)
